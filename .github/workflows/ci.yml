name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: 테스트 및 코드 품질 검사
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        
      - name: Node.js ${{ matrix.node-version }} 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 의존성 설치
        run: npm ci
        
      - name: 타입 체크
        run: npm run type-check
        
      - name: 린트 검사
        run: npm run lint
        
      - name: 코드 포맷팅 검사
        run: npm run format:check
        
      - name: 단위 테스트
        run: npm run test:unit
        
      - name: 통합 테스트
        run: npm run test:integration
        
      - name: 커버리지 업로드
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
  build:
    name: 빌드 테스트
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 의존성 설치
        run: npm ci
        
      - name: 환경 변수 설정
        run: |
          echo "NODE_ENV=production" >> .env.local
          echo "NEXT_PUBLIC_API_URL=https://api.bkpop.com" >> .env.local
          echo "DB_HOST=localhost" >> .env.local
          echo "DB_USER=test" >> .env.local
          echo "DB_PASSWORD=test" >> .env.local
          echo "DB_NAME=test_db" >> .env.local
          echo "JWT_SECRET=test-secret-key" >> .env.local
          
      - name: 빌드 실행
        run: npm run build
        
      - name: 빌드 산출물 업로드
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          
  security:
    name: 보안 검사
    runs-on: ubuntu-latest
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 의존성 설치
        run: npm ci
        
      - name: 보안 취약점 검사
        run: npm audit --audit-level=high
        
      - name: 의존성 라이센스 검사
        run: npx license-checker --summary
        
  deploy:
    name: 배포
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 의존성 설치
        run: npm ci
        
      - name: 빌드 실행
        run: npm run build
        
      - name: Vercel 배포
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          
  notify:
    name: 알림
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: 슬랙 알림
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployment'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 